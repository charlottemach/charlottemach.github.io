title Trying out Chaos Engineering using Litmus
date 2022-1-6
import settings.scroll
import markups.scroll
groups index
keyboardNav

aftertext
 dateline
 The idea of using Chaos Engineering to improve systems is becoming more and more popular with the Kubernetes crowd, no doubt due to Netflix's Simian Army and the experiences that followed.
 link https://github.com/Netflix/SimianArmy Netflix's Simian Army
 Simulating outages or different errors to test resilience, understanding your system better and battle-test your applications sounds like a good idea, here's one way of getting started.

section Understand the basics

paragraph
 Chaos Engineering is NOT about breaking things randomly and seeing what happens. It's about making an assumption about your system, trying to understand what would happen if a certain error or outage happens and testing that assumption in a controlled environment. For real-life systems that involves a large amount of preparation, communication and learning from whatever results a chaos experiment may have.

endSnippet

markdown
 If you're just getting started and want to play around and learn, [Litmus](https://docs.litmuschaos.io/) is an interesting tool to try on Kubernetes. It does open up some issues with staying in control of your experiment and doesn't really minimize the blast radius, but it is still fun to try out.

section Install
paragraph
 Litmus describes itself as an end-to-end chaos engineering platform for cloud native infra and applications. It's control plane comes as a Kubernetes deployment consisting of a frontend, a server and a MongoDB backend, all together called the Chaos Center.

code
 kubectl apply -f https://litmuschaos.github.io/litmus/2.4.0/litmus-2.4.0.yaml
markdown
 The above command is all it takes to install it on a single cluster (see the [docs](https://docs.litmuschaos.io/docs/getting-started/installation/) for the latest version).

markdown
 Once the pods are up and running, you can access the frontend via `<IP>:<Nodeport>` which you can see in the service that gets created (in my case it's on a local cluster, so localhost:30711).
code
 NAMESPACE     NAME                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                       AGE
 litmus        litmusportal-frontend-service   NodePort    10.98.60.168     <none>        9091:30711/TCP                                                66s
 litmus        litmusportal-server-service     NodePort    10.109.185.162   <none>        9002:32132/TCP,8000:30885/TCP,9003:31270/TCP,3030:31009/TCP   65s

paragraph
 After logging in with the default credentials of user: admin and pw: litmus, you're prompted to change the password.
paragraph
 In the Chaos Center you can create workflows, add different hubs (like experiment libraries), agents  or monitor experiment runs and results.
markdown
 (The 9002 port on the server lets you access the internal [GraphQL playground](https://github.com/graphql/graphql-playground).)

section Concepts
markdown
 [This post](https://dev.to/litmus-chaos/how-litmus-orchestrates-chaos-3nnd) goes into more detail, but basically Litmus runs as an [operator](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/), using different CustomResources to define states and custom controllers to create Chaos Runners which execute the experiments as jobs.

subsection CRs
list
- Chaos Experiment: the actual test you want to run
- Chaos Engine: the mapping of the test to the thing you want to test (infra/app)
- Chaos Result: giving you the current state and outcome of a test

paragraph
 A Chaos Workflow can be used to add additional steps around an experiment, for example to add preparation, cleanup or just to execute multiple operations.

section Running a test

paragraph
 With Litmus up and running you now have different options
markdown
 - [Run a sample workflow using the UI](https://docs.litmuschaos.io/docs/getting-started/run-your-first-workflow)
 - [Run a workflow from the ChaosHub](https://hub.litmuschaos.io/): The Hub contains different generic experiments like introducing network latency or node restarts, as well as application-specific experiments for a some cloud providers, Kafka, Cassandra.
 - Write your own (using [Python](https://github.com/litmuschaos/litmus-python) or [Golang](https://github.com/litmuschaos/litmus-go))

markdown
 For more resources, check out [awesome chaos engineering](https://github.com/dastergon/awesome-chaos-engineering) on GitHub.
