title Setting up an MH-Z14A CO2 sensor with Raspberry Pi
date 2020-05-17

aftertext
 dateline
 After feeling tired for days (yay for the COVID-19 lockdown and being at home all day every day), I wanted to see if the indoor air was at fault.
 So I bought an MH-Z14A sensor to get CO2-levels at home, by attaching it to a Raspberry Pi 3.

paragraph
 Indoor CO2-levels have pretty large impact on sleep and concentration. Usually measured in ppm (parts per million), the desired values are below 1000ppm.

endSnippet
groups index
import settings.scroll
import ga.scroll
keyboardNav

section CO2 levels and effects

paragraph
  According to this <a href="https://www.kane.co.uk/knowledge-centre/what-are-safe-levels-of-co-and-co2-in-rooms">source</a> the following PPM levels correspond to certain effects.

html
  <table>
  <thead>
    <tr>
      <th>PPM</th>
      <th>Effects</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>250-400</td>
      <td>normal outdoor air level</td>
    </tr>
    <tr>
      <td>400 - 1000</td>
      <td>indoor, good airflow</td>
    </tr>
    <tr>
      <td>1000-2000</td>
      <td>drowsiness, poor air</td>
    </tr>
    <tr>
      <td>2000-5000</td>
      <td>headaches, sleepiness, stale air</td>
    </tr>
    <tr>
      <td>&gt;5000</td>
      <td>unusual air conditions, other gases</td>
    </tr>
    <tr>
      <td>&gt;40000</td>
      <td>harmful due to oxygen deprivation</td>
    </tr>
  </tbody>
  </table>

paragraph
  To get started, you'll need a CO2-sensor, a Raspberry Pi and some jumper cables.

paragraph
  Log into your Pi and run <code>sudo raspi-config</code>.
  Go to <strong>5 Interfacing Options</strong>, then <strong>P6 Serial</strong>.
  Select <strong>No</strong> on the login shell and <strong>Yes</strong> on the serial port hardware.

paragraph
  Then install pyserial for the sensor code.

code
  sudo apt install python3-pip
  pip3 install pyserial

section Sensor setup

paragraph
  The sensor has three interfaces, analog output, PWM output and a 9600 baud 3V/5V TTL UART interface. You basically send a request and the sensor responds.
paragraph
  I manually rewired the cable that came with the sensor, to have female jumper DuPont wires to attach to the Pi's GPIO pins.
  The sensor has three interfaces, analog output, PWM output and a 9600 baud 3V/5V TTL UART interface. You basically send a request and the sensor responds.
  You can also use F-M jumper wires and use the PWM interface instead.
 
paragraph
  The sensor pins are:
list
 - PWM (yellow)
 - TXD (green)
 - RXD (blue)
 - VCC (red)
 - GND (black)
 - AnalogOutput (white, not used) 
 - HD (brown, not used)
and need to be attached to the Pi's pins like this:

image assets/images/diagram.png Wiring diagram

section Python code

Here's a simplified version of the code, for the full version <a href="https://github.com/charlottemach/mhz14a-sensor">check here</a>.
code
  #!/usr/bin/env python3
  import serial
  import time
  
  class CO2Sensor():
    request = [0xff, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79]
  
    def __init__(self, port='/dev/ttyS0'):
      self.serial = serial.Serial(
          port = port,
          timeout = 1
      )
  
    def get(self):
      self.serial.write(bytearray(self.request))
      response = self.serial.read(9)
      if len(response) == 9:
        current_time = time.strftime('%H:%M:%S', time.localtime())
        return {"time": current_time, "ppa": (response[2] << 8) | response[3], "temp": response[4]}
      return -1
  
  def main():
    # other Pi versions might need CO2Sensor('/dev/ttyAMA0')
    sensor = CO2Sensor()
    print(sensor.get())
  
  if __name__ == '__main__':
    main()

Now if you run 
code
  python3 filename.py
you'll get the time, the current ppm value and the current temperature.</br>
Finished! :)

image assets/images/sensor.jpg Pi and sensor

ga
